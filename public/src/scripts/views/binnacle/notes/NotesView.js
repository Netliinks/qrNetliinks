//
//  NotesView.ts
//
//  Generated by Poll Castillo on 09/03/2023.
//
import { Config } from "../../../Configs.js";
import { getEntityData, getEntitiesData, getFile } from "../../../endpoints.js";
import { CloseDialog, renderRightSidebar, filterDataByHeaderType, inputObserver, generateCsv } from "../../../tools.js";
import { UIContentLayout, UIRightSidebar } from "./Layout.js";
import { UITableSkeletonTemplate } from "./Template.js";
// Local configs
const tableRows = Config.tableRows;
let currentPage = Config.currentPage;
const pageName = 'Reportes';
const customerId = localStorage.getItem('customer_id');
const GetNotes = async () => {
    const notesRaw = await getEntitiesData('Note');
    const notes = notesRaw.filter((data) => `${data.customer?.id}` === `${customerId}`);
    return notes;
};
export class Notes {
    constructor() {
        this.dialogContainer = document.getElementById('app-dialogs');
        this.siebarDialogContainer = document.getElementById('entity-editor-container');
        this.appContainer = document.getElementById('datatable-container');
        this.render = async () => {
            let notesArray = await GetNotes();
            this.appContainer.innerHTML = '';
            this.appContainer.innerHTML = UIContentLayout;
            // Getting interface elements
            const viewTitle = document.getElementById('view-title');
            const tableBody = document.getElementById('datatable-body');
            // Changing interface element content
            viewTitle.innerText = pageName;
            tableBody.innerHTML = UITableSkeletonTemplate.repeat(tableRows);
            // Exec functions
            this.load(tableBody, currentPage, notesArray);
            this.searchNotes(tableBody, notesArray);
            new filterDataByHeaderType().filter();
            this.pagination(notesArray, tableRows, currentPage);
            this.export();
        };
        this.load = (tableBody, currentPage, notes) => {
            tableBody.innerHTML = ''; // clean table
            // configuring max table row size
            currentPage--;
            let start = tableRows * currentPage;
            let end = start + tableRows;
            let paginatedItems = notes.slice(start, end);
            // Show message if page is empty
            if (notes.length === 0) {
                let row = document.createElement('TR');
                row.innerHTML = `
            <td>No existen datos<td>
            <td></td>
            <td></td>
            `;
                tableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < paginatedItems.length; i++) {
                    let note = paginatedItems[i]; // getting note items
                    let row = document.createElement('TR');
                    const noteCreationDateAndTime = note.creationDate.split('T');
                    const noteCreationDate = noteCreationDateAndTime[0];
                    row.innerHTML += `
                    <td>${note.title}</td>
                    <td>${note.content}</td>
                    <td id="table-date">${noteCreationDate}</td>
                    <td>
                        <button class="button" id="entity-details" data-entityId="${note.id}">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                    </td>
                `;
                    tableBody.appendChild(row);
                    // TODO: Corret this fixer
                    // fixDate()
                }
            }
            this.previewNote();
            //renderTimeStamp()
        };
        this.searchNotes = async (tableBody, notes) => {
            const search = document.getElementById('search');
            await search.addEventListener('keyup', () => {
                const arrayNotes = notes.filter((note) => `${note.title}
                ${note.content}
                ${note.creationDate}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase()));
                let filteredNotes = arrayNotes.length;
                let result = arrayNotes;
                if (filteredNotes >= Config.tableRows)
                    filteredNotes = Config.tableRows;
                this.load(tableBody, currentPage, result);
                this.pagination(result, tableRows, currentPage);
                // Rendering icons
            });
        };
        this.previewNote = async () => {
            const openPreview = document.querySelectorAll('#entity-details');
            openPreview.forEach((preview) => {
                let currentNoteId = preview.dataset.entityid;
                preview.addEventListener('click', () => {
                    previewBox(currentNoteId);
                });
            });
            const previewBox = async (noteId) => {
                const note = await getEntityData('Note', noteId);
                renderRightSidebar(UIRightSidebar);
                const sidebarContainer = document.getElementById('entity-editor-container');
                const closeSidebar = document.getElementById('close');
                closeSidebar.addEventListener('click', () => {
                    new CloseDialog().x(sidebarContainer);
                });
                // Note details
                const _details = {
                    picture: document.getElementById('note-picture-placeholder'),
                    title: document.getElementById('note-title'),
                    content: document.getElementById('note-content'),
                    author: document.getElementById('note-author'),
                    authorId: document.getElementById('note-author-id'),
                    date: document.getElementById('creation-date'),
                    time: document.getElementById('creation-time')
                };
                const noteCreationDateAndTime = note.creationDate.split('T');
                const noteCreationTime = noteCreationDateAndTime[1];
                const noteCreationDate = noteCreationDateAndTime[0];
                _details.title.innerText = note.title;
                _details.content.innerText = note.content;
                _details.author.value = `${note.user.firstName} ${note.user.lastName}`;
                _details.authorId.value = note.createdBy;
                _details.date.value = noteCreationDate;
                _details.time.value = noteCreationTime;
                if (note.attachment !== undefined) {
                    const image = await getFile(note.attachment);
                    _details.picture.innerHTML = `
                    <img id="note-picture" width="100%" class="note_picture margin_b_8" src="${image}">
                `;
                }
            };
        };
        this.export = () => {
            const exportNotes = document.getElementById('export-button');
            exportNotes.addEventListener('click', async () => {
                this.dialogContainer.style.display = 'block';
                this.dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Seleccionar la fecha</h2>
                            </div>

                            <div class="dialog_message padding_8">
                                <div class="form_group">
                                    <div class="form_input">
                                        <label class="form_label" for="start-date">Desde:</label>
                                        <input type="date" class="input_date input_date-start" id="start-date" name="start-date">
                                    </div>
                    
                                    <div class="form_input">
                                        <label class="form_label" for="end-date">Hasta:</label>
                                        <input type="date" class="input_date input_date-end" id="end-date" name="end-date">
                                    </div>
                                </div>
                            </div>

                            <div class="dialog_footer">
                                <button class="btn btn_primary" id="cancel">Cancelar</button>
                                <button class="btn btn_danger" id="export-data">Exportar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
                let fecha = new Date(); //Fecha actual
                let mes = fecha.getMonth() + 1; //obteniendo mes
                let dia = fecha.getDate(); //obteniendo dia
                let anio = fecha.getFullYear(); //obteniendo a√±o
                if (dia < 10)
                    dia = '0' + dia; //agrega cero si el menor de 10
                if (mes < 10)
                    mes = '0' + mes; //agrega cero si el menor de 10
                // @ts-ignore
                document.getElementById("start-date").value = anio + "-" + mes + "-" + dia;
                // @ts-ignore
                document.getElementById("end-date").value = anio + "-" + mes + "-" + dia;
                inputObserver();
                const _closeButton = document.getElementById('cancel');
                const exportButton = document.getElementById('export-data');
                const _dialog = document.getElementById('dialog-content');
                exportButton.addEventListener('click', async () => {
                    let rows = [];
                    const _values = {
                        start: document.getElementById('start-date'),
                        end: document.getElementById('end-date'),
                    };
                    const notes = await GetNotes();
                    for (let i = 0; i < notes.length; i++) {
                        let note = notes[i];
                        let noteCreationDateAndTime = note.creationDate.split('T');
                        let noteCreationDate = noteCreationDateAndTime[0];
                        let noteCreationTime = noteCreationDateAndTime[1];
                        // @ts-ignore
                        if (noteCreationDate >= _values.start.value && noteCreationDate <= _values.end.value) {
                            let obj = {
                                "T√≠tulo": `${note.title.split("\n").join("(salto)")}`,
                                "Fecha": `${noteCreationDate}`,
                                "Hora": `${noteCreationTime}`,
                                "Usuario": `${note.user.firstName} ${note.user.lastName}`,
                                "Contenido": `${note.content.split("\n").join("(salto)")}`
                            };
                            rows.push(obj);
                        }
                    }
                    generateCsv(rows, "Reportes");
                });
                _closeButton.onclick = () => {
                    new CloseDialog().x(_dialog);
                };
            });
        };
        this.closeRightSidebar = () => {
            const closeButton = document.getElementById('close');
            const editor = document.getElementById('entity-editor-container');
            closeButton.addEventListener('click', () => {
                new CloseDialog().x(editor);
            });
        };
    }
    pagination(items, limitRows, currentPage) {
        const tableBody = document.getElementById('datatable-body');
        const paginationWrapper = document.getElementById('pagination-container');
        paginationWrapper.innerHTML = '';
        let pageCount;
        pageCount = Math.ceil(items.length / limitRows);
        let button;
        for (let i = 1; i < pageCount + 1; i++) {
            button = setupButtons(i, items, currentPage, tableBody, limitRows);
            paginationWrapper.appendChild(button);
        }
        function setupButtons(page, items, currentPage, tableBody, limitRows) {
            const button = document.createElement('button');
            button.classList.add('pagination_button');
            button.innerText = page;
            button.addEventListener('click', () => {
                currentPage = page;
                new Notes().load(tableBody, page, items);
            });
            return button;
        }
    }
}
/*async function renderTimeStamp() {
    const exportButton: InterfaceElement = document.getElementById('export-button')

    exportButton.addEventListener('click', (): void => {
        exportData()
    })

}


async function exportData() {
    console.log('%cTIMESTAMP üïí', 'color: white;font-weight: bolder; font-size: 18px; background-color: slateblue; padding: 3px 5px')
    console.log('%c‚ÑπÔ∏è Importante: se necesita cambiar el string de la fecha para filtrar los elementos', 'color: slateblue;font-weight: bolder; font-size: 10px;')
    renderRightSidebar(UIExportSidebar)


    const _export: InterfaceElement = document.getElementById('export-data')

    const pickedTime: any = {
        from: document.getElementById('timestamp-from'),
        to: document.getElementById('timestamp-to'),
    }

    const notes: any = await GetNotes()

    // 2023-03-21T16:28:47

    _export.addEventListener('click', (): void => {
        if (pickedTime.from.value === '') {
            alert('Debe seleccionar una fecha de inicio')
        } else {

            const preDate = pickedTime.from.value
            const postDate = pickedTime.to.value
            const fnotes: any = notes.filter((note: any) =>
                toMs(note.creationDate) > preDate && toMs(note.creationDate) < postDate
            )

            console.log(fnotes)
            console.log('Time from: ' + pickedTime.from.value)
            console.log('Time to: ' + pickedTime.to.value)
        }
    })

    console.log(_export)
}


function toMs(dateStr: any) {
    let separateDate: any = dateStr.split('T')
    const [year, month, day] = separateDate[0].split('-')
    let date = new Date(year, month - 1, day).getTime()
    console.log(date)
    return date
}*/ 
