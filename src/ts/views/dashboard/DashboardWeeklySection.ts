//
//  DashboardWeeklySection.ts
//
//  Generated by Poll Castillo on 23/02/2023.
//

import { InterfaceElement } from "../../types"
import { createChartContext } from "./CreateChartContext.js"
import { getFilterEntityData, getEntityData, getUserInfo } from "../../endpoints.js"

export const renderWeeklyChart = async (): Promise<void> => {
  createChartContext('weekly')
  const chart: InterfaceElement =
    document.getElementById('weekly-chart')
    const _date = new Date()
    // DATE
    const _day: number = _date.getDate()
    const _month: number = _date.getMonth() + 1
    const _year: number = _date.getFullYear()
    const fchHasta: string = `${_year}-${('0' + _month).slice(-2)}-${('0' + _day).slice(-2)}`
    let dias = 1000 * 60 * 60 * 24 * 6
    const _date1 = new Date(_date.getTime() - dias);
    const _day1: number = _date1.getDate()
    const _month1: number = _date1.getMonth() + 1
    const _year1: number = _date1.getFullYear()
    const fchDesde: string = `${_year1}-${('0' + _month1).slice(-2)}-${('0' + _day1).slice(-2)}`
    let _userInfo: any = await getUserInfo()
    let currentUserInfo = await getEntityData('User', `${_userInfo.attributes.id}`)

    let raw = JSON.stringify({
      "filter": {
          "conditions": [
            {
              "property": "customer.id",
              "operator": "=",
              "value": `${currentUserInfo.customer.id}`
            },
            {
              "property": "creationDate",
              "operator": ">=",
              "value": `${fchDesde}`
            },
            {
              "property": "creationDate",
              "operator": "<=",
              "value": `${fchHasta}`
            }
          ]
      }
  });
  let statistics = await getFilterEntityData("Statistics_", raw);
  let arryVisits: any = []
  let arryMarcations: any = []

  let contadorVisitas = {
    Lun: 0,
    Mar: 0,
    Mie: 0,
    Jue: 0,
    Vie: 0,
    Sab: 0,
    Dom: 0
  }

  let contadorMarcaciones = {
    Lun: 0,
    Mar: 0,
    Mie: 0,
    Jue: 0,
    Vie: 0,
    Sab: 0,
    Dom: 0
  }
  for(let i = 0; i<statistics.length; i++){
    let data = statistics[i]
    let fecha = new Date(data.creationDate);
    var nDate = fecha.setDate(fecha.getDate()+1);
    fecha = new Date(nDate);
    var weekday = fecha.getDay();
    switch (weekday) {
      case 0:
        contadorMarcaciones.Dom += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Dom += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 1:
        contadorMarcaciones.Lun += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Lun += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 2:
        contadorMarcaciones.Mar += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Mar += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 3:
        contadorMarcaciones.Mie += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Mie += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 4:
        contadorMarcaciones.Jue += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Jue += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 5:
        contadorMarcaciones.Vie += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Vie += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      case 6:
        contadorMarcaciones.Sab += data.totalIngressMarcation ? data.totalIngressMarcation : 0
        contadorVisitas.Sab += ((data.totalIngressVisitGuard ? data.totalIngressVisitGuard : 0) + (data.totalIngressVisitClient ? data.totalIngressVisitClient : 0))
      break;
      default:
      
      break;
    }
  }
  arryVisits.push(contadorVisitas.Lun)
  arryVisits.push(contadorVisitas.Mar)
  arryVisits.push(contadorVisitas.Mie)
  arryVisits.push(contadorVisitas.Jue)
  arryVisits.push(contadorVisitas.Vie)
  arryVisits.push(contadorVisitas.Sab)
  arryVisits.push(contadorVisitas.Dom)

  arryMarcations.push(contadorMarcaciones.Lun)
  arryMarcations.push(contadorMarcaciones.Mar)
  arryMarcations.push(contadorMarcaciones.Mie)
  arryMarcations.push(contadorMarcaciones.Jue)
  arryMarcations.push(contadorMarcaciones.Vie)
  arryMarcations.push(contadorMarcaciones.Sab)
  arryMarcations.push(contadorMarcaciones.Dom)
  // @ts-ignore
  new Chart(chart, {
    type: 'bar',
    data: {
      labels: [
        'Lunes',
        'Martes',
        'Miércoles',
        'Jueves',
        'Viernes',
        'Sábado',
        'Domingo'
      ],
      datasets: [
        {
          label: 'Visitas',
          data: arryVisits,
          borderWidth: 1
        },
        {
          label: 'Marcaciones',
          data: arryMarcations,
          borderWidth: 1
        }
      ]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          position: 'bottom'
        },
        title: {
          display: true,
          text: `Registros de los últimos 7 días: [${fchDesde}] - [${fchHasta}]`
        }
      },
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  })
}