//d
//  login.ts
//
//  Generated by Poll Castillo on 15/02/2023.
//

import { getUserInfo, _userAgent, getEntityData, getEntitiesData, updateEntity, getFilterEntityData } from "./endpoints.js"
import { InterfaceElement, Request } from "./types.js"
import { createQrContext } from "./createQrContext.js"

const loginContainer: InterfaceElement = document.getElementById('login-container')
const app: InterfaceElement = document.getElementById('app')

const connectionHeader = {
    Accept: "application/json",
    "User-agent": _userAgent,
    Authorization: "Basic YzNjMDM1MzQ2MjoyZmM5ZjFiZTVkN2IwZDE4ZjI1YmU2NDJiM2FmMWU1Yg==",
    "Content-Type": "application/x-www-form-urlencoded",
    Cookie: "JSESSIONID=CDD208A868EAABD1F523BB6F3C8946AF",
}

const platformSystem: string = 'clients'

const reqOP: Request = {
    url: 'https://backend.netliinks.com:443/oauth/token',
    method: 'POST'
}

export class SignIn {
    public async checkSignIn(): Promise<void> {
        const accessToken = localStorage.getItem('access_token')
        const checkUser = async (): Promise<void> => {
            let currentUser = await getUserInfo()
            if (currentUser.error === 'invalid_token') {
                this.accessToken()
            }
            if(currentUser.username === "consulta"){
                const valores = window.location.search;
                const urlParams = new URLSearchParams(valores);
                var token = urlParams.get('key');
                let data = await getEntityData("Visit", `${token}`)
                console.log(data)
                this.showLogin(data)
            }
        }

        if (accessToken) {
            checkUser()
        } else {
            this.accessToken()
        }

    }

    public showLogin(data: any): void {
        loginContainer.style.display = 'flex !important'
        loginContainer.innerHTML = `
        <div class="login_window">
        <div class="login_header">
          <img src="./public/src/assets/pictures/app_logo.png">
          <h1 class="login_title">QR PARA VISITA</h1>
          <div class="input_detail">
            <label for="ingress-date"><i class="fa-solid fa-user"></i> ${data.firstName} ${data.firstLastName}</label><br>
            <label for="ingress-date"><i class="fa-solid fa-address-card"></i> ${data.dni}</label><br>
            <label for="ingress-date"><i class="fa-solid fa-calendar"></i> ${data.creationDate}</label><br>
            <label for="ingress-date"><i class="fa-solid fa-heartbeat"></i> ${data.visitState.name}</label><br>
            <label for="ingress-date"><i class="fa-solid fa-share"></i> ${data.user.username}</label><br>
          </div>
        </div>
        <div class="login_content">
            <div id="qrcode"></div>
        </div>

        <div class="login_footer">
          <div class="login_icons">
            <i class="fa-regular fa-house"></i>
            <i class="fa-regular fa-user"></i>
            <i class="fa-regular fa-inbox"></i>
            <i class="fa-regular fa-file"></i>
            <i class="fa-regular fa-computer"></i>
            <i class="fa-regular fa-mobile"></i>
          </div>
          <p>Accede a todas nuestras herramientas</p>

          <div class="foot_brief">
            <p>Desarrollado por</p>
            <img src="./public/src/assets/pictures/login_logo.png">
          </div>
        </div>
      </div>
        `
        this.signIn()
    }

    private signIn(): void {
        const form: InterfaceElement = document.querySelector('#login-form')
        const password: InterfaceElement = form.querySelector('#password')
        const userName: InterfaceElement = form.querySelector('#username')
        const trigger: InterfaceElement = form.querySelector('#login')
        createQrContext()
        new QRCode(document.getElementById("qrcode"), "https://www.ribosomatic.com");
        //this.accessToken()
    }

    private accessToken(): void {
        localStorage.removeItem('access_token')
        const reqOptions: {} = {
            method: reqOP.method,
            body: `grant_type=password&username=consulta&password=consulta`,
            headers: connectionHeader
        }

        fetch(reqOP.url, reqOptions)
            .then((res: Response) => res.json())
            .then((res: any) => {
                if (res.error == 'Bad credentials') {
                    console.error('error en las credenciales')
                }
                else {
                    const connectionData = {
                        token: res.access_token,
                        expiresIn: res.expires_in,
                        refreshToken: res.refresh_token,
                        scope: res.scope,
                        tokenType: res.token_type
                    }
                    localStorage.setItem('access_token', connectionData.token)
                    window.location.reload()
                }

            })
    }

    public signOut(): void {
        this.accessToken()
    }

}