//
//  lib.tools.ts
//
// Generated by Poll Castillo on 15/02/2023.
import { currentTime } from "./UserLoggedInfo"
import { getEntitiesData, getUserInfo, getFilterEntityData, getEntityData, registerEntity, _userAgent } from "./endpoints.js"
import { Data, InterfaceElement, InterfaceElementCollection } from "./types.js"

//
export const inputObserver = (): void => {
    const inputs = <NodeListOf<Element>>document.querySelectorAll('input')
    inputs.forEach((input: any) => {
        input.addEventListener("keyup", (e: any): void => {
            if (input.value == "" || input.value == " ")
                input.classList.remove('input_filled'),
                    input.value = ""
            else
                input.classList.add('input_filled')
        })
    })
}

export const inputSelect = async (entity: string, selectId: string, currentStatus?: string): Promise<void> => {
    const data = await getEntitiesData(entity)
    const state = await currentStatus
    const select: InterfaceElement = document.querySelector(`#${selectId}`)
    const inputParent = select.parentNode
    const optionsContent = inputParent.querySelector('#input-options')
    const optionsContainer: InterfaceElement = document.createElement('div')
    optionsContainer.classList.add('input_options_container')

    optionsContent.appendChild(optionsContainer)

    for (let i = 0; i < data.length; i++) {
        const inputOption: InterfaceElement = document.createElement('div')
        select.setAttribute('data-optionid', data[0].id)
        select.setAttribute('value', data[0].name)
        inputOption.classList.add('input_option')
        inputOption.setAttribute('id', data[i].id)
        let nameData: Data = data[i].name
        if (nameData === 'Enabled') {
            nameData = 'Activo'
        } else if (nameData === 'Disabled') {
            nameData = 'Inactivo'
        }
        inputOption.innerHTML = nameData

        optionsContainer.appendChild(inputOption)
    }
    const options: InterfaceElement = optionsContainer.querySelectorAll('.input_option')

    if (state === "Enabled") {
        select.value = "Activo"
        select.setAttribute('data-optionid', '60885987-1b61-4247-94c7-dff348347f93')
    } else if (state === 'Disabled') {
        select.value = "Inactivo"
        select.setAttribute('data-optionid', '225b5e5d-9bb1-469a-b2d9-ca85d53db47b')
    } else {
        select.value = data[0].name
    }

    select.addEventListener('click', (): void => {
        inputParent.classList.toggle('select_active')
    })

    options.forEach((option: any) => {
        option.addEventListener('click', (): void => {
            select.value = option.innerText
            select.removeAttribute('data-optionid')
            select.setAttribute('data-optionid', option.getAttribute('id'))
            inputParent.classList.remove('select_active')
        })
    })
}

export class FixStatusElement {
    public fix(element: any): void {
        const elementTextValue = element.innerText
        if (elementTextValue === "Enabled")
            elementTextValue.innerText = 'Activo',
                elementTextValue.toUpperCase()
        else
            elementTextValue.toUpperCase()
    }
}

export class FixStatusInputElement {
    public fix(inputId: string): void {
        const inputs = <NodeListOf<Element>>document.querySelectorAll(`#${inputId}`)
        inputs.forEach((input: any): void => {
            if (input.value === 'Enabled')
                input.value = 'Activo'.toUpperCase()
            else if (input.value == 'Disabled')
                input.value = 'Inactivo'.toUpperCase()
        })
    }
}

export const drawTagsIntoTables = (): void => {
    const tags: HTMLElement | any = document.querySelectorAll('.tag span')
    tags.forEach((tag: any): void => {
        let text = tag.innerText
        if (text === "Enabled" ||
            text === "enabled" ||
            text === "ENABLED" ||
            text === "Activo" ||
            text === "ACTIVO") {
            tag.innerText = "Activo"
            tag.classList.add("tag_green")
        }
        else if (text === "Disabled" ||
            text === "disabled" ||
            text === "DISABLED" ||
            text === "Inactivo" ||
            text === "INACTIVO") {
            tag.innerText = "Inactivo"
            tag.classList.add("tag_gray")
        } else if (text === "Pendiente" ||
            text === "pendiente" ||
            text === "PENDIENTE") {
            tag.classList.add("tag_yellow")
        } else {
            tag.classList.add('tag_gray')
        }
    })
}

export class CloseDialog {
    public x(container?: any) {
        container.style.display = 'none'
        // const dialog: InterfaceElement = container.firstElementChild
        // dialog.remove()
    }
}

// SIDEBAR RENDERING TOOLS
export const renderRightSidebar = (UIFragment: InterfaceElement) => {
    const dialogContainer: InterfaceElement = document.getElementById('entity-editor-container')

    dialogContainer.innerHTML = ''
    dialogContainer.style.display = 'flex'
    dialogContainer.innerHTML = UIFragment
}

export const fixDate = () => {
    const arrayDates: InterfaceElementCollection = document.querySelectorAll('#table-date')
    arrayDates.forEach((date: InterfaceElement) => {
        const dateP1 = date.innerText.split('-')
        const dateP2 = dateP1[2].split('T')
        const dateP3 = dateP2[1].split(':')

        const YearDate = dateP1[0]
        const MonthDate = dateP1[1]
        const DayDate = dateP2[0]

        const Hours = dateP3[0]
        const Minutes = dateP3[1]
        const Seconds = dateP3[2]

        const DT = YearDate + ' ' + MonthDate + ' ' + DayDate
        const Time = Hours + ':' + Minutes + ':' + Seconds.slice(0, 2)

        date.innerText = DT + ' ' + Time
    })

}

export class filterDataByHeaderType {
    private readonly datatable: InterfaceElement = document.getElementById('datatable')

    public filter = (): void => {

        this.datatable.onclick = (e: any) => {
            if (e.target.tagName != "SPAN") return
            let span = e.target
            let th = e.target.parentNode

            const THead = this.datatable.querySelectorAll('tr th span')
            THead.forEach((header: InterfaceElement) => {
                header.classList.remove('datatable_header_selected')
            })

            e.target.classList.add('datatable_header_selected')
            this.sortGrid(th.cellIndex, span.dataset.type)
        }
    }

    private sortGrid = (colNum: number, type: string): void => {
        let tbody: any = this.datatable.querySelector('tbody')
        let rowsArray = Array.from(tbody.rows)
        let compare: any

        switch (type) {
            case 'name':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'id':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'status':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'citadel':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
        }

        rowsArray.sort(compare)
        tbody.append(...rowsArray)
    }
}

export const userInfo = getUserInfo()

export const getVerifyEmail = async (email: string) => {
    let value = false;
    //console.log(email.includes("@"))
    if(email.includes("@") === true){
        /*const users = await getEntitiesData('User');
        const data = users.filter((data) => `${data.email}`.includes(`${email}`));*/
        let raw = JSON.stringify({
            "filter": {
                "conditions": [
                  {
                    "property": "email",
                    "operator": "=",
                    "value": `${email}`
                  }
                ]
            }
        });
        let data = await getFilterEntityData("User", raw);
        if(data.length != 0){
            value = true;
        }
    }
    return value;
}


export const verifyUserType = (userType: string) =>{
    if(userType == 'CUSTOMER'){
      return 'Cliente'
    }else if(userType == 'GUARD'){
      return 'Guardia'
    }else if(userType == 'EMPLOYEE'){
      return 'Empleado'
    }else if(userType == 'CONTRACTOR'){
      return 'Contratista'
    }else{
      return userType
    }
}

export const registryPlataform = async(id: any) => {
    let platUser = await getEntityData('User', id)
    const _date = new Date()
    // TIME
    const _hours: number = _date.getHours()
    const _minutes: number = _date.getMinutes()
    const _seconds: number = _date.getSeconds()
    const _fixedHours: string = ('0' + _hours).slice(-2)
    const _fixedMinutes: string = ('0' + _minutes).slice(-2)
    const _fixedSeconds: string = ('0' + _seconds).slice(-2)
    const currentTime = `${_fixedHours}:${_fixedMinutes}:${_fixedSeconds}`
    // DATE
    const _day: number = _date.getDate()
    const _month: number = _date.getMonth() + 1
    const _year: number = _date.getFullYear()
    const date: string = `${_year}-${('0' + _month).slice(-2)}-${('0' + _day).slice(-2)}`
    let plataformRaw = JSON.stringify({
        // @ts-ignore
        "userAgent": `${_userAgent}`,
        "customer": {
            "id": `${platUser.customer.id}`
        },
        "system": {
            "id": `3377a344-a1e9-7ea0-4204-44d4040debd2`
        },
        "user": {
            "id": `${platUser.id}`
        },
        // @ts-ignore
        "creationDate": `${date}`,
        // @ts-ignore
        "creationTime": `${currentTime}`,
    })
    await registerEntity(plataformRaw, 'WebAccess')
    .then(res => {
        console.log("Registrado")
    })
}

export const contDown = () => {
    const FULL_DASH_ARRAY = 283;
      const WARNING_THRESHOLD = 20;
      const ALERT_THRESHOLD = 10;
      
      const COLOR_CODES = {
        info: {
          color: "green"
        },
        warning: {
          color: "orange",
          threshold: WARNING_THRESHOLD
        },
        alert: {
          color: "red",
          threshold: ALERT_THRESHOLD
        }
      };
      
      const TIME_LIMIT = 60;
      let timePassed = 0;
      let timeLeft = TIME_LIMIT;
      let timerInterval: any = null;
      let remainingPathColor = COLOR_CODES.info.color;
      // @ts-ignore
      document.getElementById("contdown").innerHTML = `
      <div class="base-timer">
        <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
          <g class="base-timer__circle">
            <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
            <path
              id="base-timer-path-remaining"
              stroke-dasharray="283"
              class="base-timer__path-remaining ${remainingPathColor}"
              d="
                M 50, 50
                m -45, 0
                a 45,45 0 1,0 90,0
                a 45,45 0 1,0 -90,0
              "
            ></path>
          </g>
        </svg>
        <span id="base-timer-label" class="base-timer__label">${formatTime(
          timeLeft
        )}</span>
      </div>
      `;
      
      startTimer();
      
      function onTimesUp() {
        clearInterval(timerInterval);
      }
      
      function startTimer() {
        timerInterval = setInterval(() => {
          timePassed = timePassed += 1;
          timeLeft = TIME_LIMIT - timePassed;
          // @ts-ignore
          document.getElementById("base-timer-label").innerHTML = formatTime(
            timeLeft
          );
          setCircleDasharray();
          setRemainingPathColor(timeLeft);
      
          if (timeLeft === 0) {
            onTimesUp();
          }
        }, 1000);
      }
      
      function formatTime(time: any) {
        const minutes = Math.floor(time / 60);
        let seconds: any = time % 60;
      
        if (seconds < 10) {
          seconds = `0${seconds}`;
        }
      
        return `${minutes}:${seconds}`;
      }
      
      function setRemainingPathColor(timeLeft: any) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
          // @ts-ignore  
          document
            .getElementById("base-timer-path-remaining")
            .classList.remove(warning.color);
          // @ts-ignore
          document
            .getElementById("base-timer-path-remaining")
            .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
          // @ts-ignore
          document
            .getElementById("base-timer-path-remaining")
            .classList.remove(info.color);
          // @ts-ignore
          document
            .getElementById("base-timer-path-remaining")
            .classList.add(warning.color);
        }
      }
      
      function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
      }
      
      function setCircleDasharray() {
        const circleDasharray = `${(
          calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        // @ts-ignore
        document
          .getElementById("base-timer-path-remaining")
          .setAttribute("stroke-dasharray", circleDasharray);
      }
}
